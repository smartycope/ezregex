{"py": [{"ezregex": "'------------------FIRST REGEX---------------------'", "regex": "------------------FIRST REGEX---------------------", "should": ["------------------FIRST REGEX---------------------"], "shouldnt": ["asdk"]}, {"ezregex": "'stuff' + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "stuff\\ (?:\\,)? (?=\\*)", "should": ["stuff , *", "stuff  *"], "shouldnt": []}, {"ezregex": "'stuff' + anyof('a', 'b', 'c') + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "stuff[abc]\\ (?:\\,)? (?=\\*)", "should": ["stuffa , *", "stuffb  *"], "shouldnt": []}, {"ezregex": "anyof('a', 'b', 'c') + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "[abc]\\ (?:\\,)? (?=\\*)", "should": ["a , *", "b  *"], "shouldnt": []}, {"ezregex": "'stuff' + anyof('a', 'b', 'c')", "regex": "stuff[abc]", "should": ["stuffa", "stuffb"], "shouldnt": []}, {"ezregex": "anyof('a', 'b', 'c')", "regex": "[abc]", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "one_of('a', 'b', 'c')", "regex": "[abc]", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "'a' + ifFollowedBy('*')", "regex": "a(?=\\*)", "should": ["a*"], "shouldnt": []}, {"ezregex": "optional(comma) + space", "regex": "(?:\\,)? ", "should": [", ", " "], "shouldnt": []}, {"ezregex": "optional(word + ow + ',' + ow) + group(word) + optional(',') + ow", "regex": "(?:\\w+(?:\\s+)?,(?:\\s+)?)?(\\w+),?(?:\\s+)?", "should": ["word\t ,word2, ", "word", "worddsfs    ", "word,   "], "shouldnt": ["", "  "]}, {"ezregex": "optional(whitechunk + 'as' + word)", "regex": "(?:\\s+as\\w+)?", "should": [" asword"], "shouldnt": []}, {"ezregex": "group(optional(matchMax(literal('.') + word)))", "regex": "((?:(?:\\.\\w+)+)?)", "should": ["..........word", ""], "shouldnt": []}, {"ezregex": "matchNum(3, either(\"'\", '\"'))", "regex": "(?:(?:'|\")){3}", "should": ["\"\"\""], "shouldnt": []}, {"ezregex": "matchNum(2, '0')", "regex": "(?:0){2}", "should": ["00"], "shouldnt": []}, {"ezregex": "matchNum(1, raw('6'))", "regex": "(?:6){1}", "should": ["6"], "shouldnt": []}, {"ezregex": "raw(r'\\A')", "regex": "\\A", "should": [""], "shouldnt": []}, {"ezregex": "raw(r'\\Z')", "regex": "\\Z", "should": [""], "shouldnt": []}, {"ezregex": "exactly('test')", "regex": "\\Atest\\Z", "should": ["test"], "shouldnt": []}, {"ezregex": "raw(r'(test)+')", "regex": "(test)+", "should": ["test", "testt", "testtt", "testttt"], "shouldnt": []}, {"ezregex": "raw(r'test+')", "regex": "test+", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'(test){3}')", "regex": "(test){3}", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3}')", "regex": "test{3}", "should": ["testttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,5}')", "regex": "(test){3,5}", "should": ["testtesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r\"(test){3, 5}\")", "regex": "(test){3, 5}", "should": [], "shouldnt": []}, {"ezregex": "raw(r\"test{3, 5}\")", "regex": "test{3, 5}", "should": [], "shouldnt": []}, {"ezregex": "raw(r'test{3,5}')", "regex": "test{3,5}", "should": ["testttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,}')", "regex": "(test){3,}", "should": ["testtesttest", "testtesttesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3,}')", "regex": "test{3,}", "should": ["testttt", "testtttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'\\d')", "regex": "\\d", "should": ["0", "1", "2"], "shouldnt": []}, {"ezregex": "raw(r'\\s')", "regex": "\\s", "should": [" ", "\t", "\n"], "shouldnt": []}, {"ezregex": "raw(r'\\w')", "regex": "\\w", "should": ["a", "Z", "5", "_"], "shouldnt": []}, {"ezregex": "raw(r'\\w+')", "regex": "\\w+", "should": ["abc", "123", "test_"], "shouldnt": []}, {"ezregex": "raw(r'.')", "regex": ".", "should": ["s", "a", "h", "r", "d", "h", "c", "f", "G", "S", "G", "D", "8", "7", "w", "3", "u", "e", "8", "4", "1", "2", "5", "a", "s", "d", "_", ";", ".", ",", "?", ".", "1", "3", "4", "*", "&", "^", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\n')", "regex": "\\n", "should": ["\n"], "shouldnt": []}, {"ezregex": "raw(r'\\r')", "regex": "\\r", "should": ["\r"], "shouldnt": []}, {"ezregex": "raw(r'\\t')", "regex": "\\t", "should": ["\t"], "shouldnt": []}, {"ezregex": "raw(r'\\f')", "regex": "\\f", "should": ["\f"], "shouldnt": []}, {"ezregex": "raw(r'\\S')", "regex": "\\S", "should": ["s", "d", "g", "S", "G", "H", "R", "5", "1", "2", "2", "$", "%", "^", "&", "*", "Z", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\D')", "regex": "\\D", "should": ["s", "d", "f", "G", "S", "D", "G", ";", "(", "[", "]"], "shouldnt": []}, {"ezregex": "raw(r'\\W')", "regex": "\\W", "should": ["/", "*", "-", "#", "^", "&", "*", "`", "?", ">", "<"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "(stuff)?", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(stuff)*')", "regex": "(stuff)*", "should": ["", "stuff", "stuffstuff", "stuffstuffstuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff|things)')", "regex": "(stuff|things)", "should": ["stuff", "things"], "shouldnt": []}, {"ezregex": "raw(r'[s,t]')", "regex": "[s,t]", "should": ["s", "t"], "shouldnt": []}, {"ezregex": "raw(r'[^s,t]')", "regex": "[^s,t]", "should": ["q", "w", "r", "u", "i", "o", "p", "a", "h", "j", "k", "B", "N", "M", "3", "4", "#", "$"], "shouldnt": []}, {"ezregex": "raw(r'(?=stuff)')", "regex": "(?=stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)')", "regex": "(stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "(stuff)?", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>stuff)')", "regex": "(?P<name>stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(?<!stuff)')", "regex": "(?<!stuff)", "should": ["thingstuffs"], "shouldnt": []}, {"ezregex": "raw(r'(a|b|c|thing|st)uff')", "regex": "(a|b|c|thing|st)uff", "should": ["auff", "buff", "cuff", "thinguff", "stuff"], "shouldnt": []}, {"ezregex": "raw(r'A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}')", "regex": "A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[\\d] [^\\d] [A-Za-z0-9_]+ . .*')", "regex": "[\\d] [^\\d] [A-Za-z0-9_]+ . .*", "should": [], "shouldnt": []}, {"ezregex": "raw(r'AB|CD AB|CD|EF|GH (AB|CD)*')", "regex": "AB|CD AB|CD|EF|GH (AB|CD)*", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(a??) a*? a{3,}? ab{4,7}?')", "regex": "(a??) a*? a{3,}? ab{4,7}?", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<test>ABC*) (?P<a>x)|(?P<b>y)')", "regex": "(?P<test>ABC*) (?P<a>x)|(?P<b>y)", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[b:]+ (b)|(:+) a|(b)')", "regex": "[b:]+ (b)|(:+) a|(b)", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?')", "regex": "(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>[a-zA-Z]+)(?P=name)')", "regex": "(?P<name>[a-zA-Z]+)(?P=name)", "should": [], "shouldnt": []}, {"ezregex": "group(+letter, name='g') + earlierGroup('g')", "regex": "(?P<g>(?:[A-Za-z])+)(?P=g)", "should": ["AA", "tt"], "shouldnt": ["ABt", "t", "9d9", "tdt"]}, {"ezregex": "group(+letter) + ' ' + earlierGroup(1)", "regex": "((?:[A-Za-z])+)\\ \\1", "should": ["the the", "at at"], "shouldnt": ["att", "thethe"]}, {"ezregex": "raw(r'[AB\\]C] [--A] [ABC\\-D] [\\^ABC]')", "regex": "[AB\\]C] [--A] [ABC\\-D] [\\^ABC]", "should": [], "shouldnt": []}, {"ezregex": "stringStartsWith('a')", "regex": "\\Aa", "should": ["asdfs", "a 89sdf a", "a"], "shouldnt": [" asdf", "sdfa", "sdf"]}, {"ezregex": "lineStartsWith('a')", "regex": "(?m)^a", "should": ["asdfs", "a 89sdf a", "a", "sdfs\nasdfd"], "shouldnt": [" asdf", "sdf\nsdf", "sdf\n a", "sdfa", "sdf"]}, {"ezregex": "stringEndsWith('a')", "regex": "a\\Z", "should": ["lklkjfda", "sdf 8 a", "a"], "shouldnt": ["asdfds", "sd fd"]}, {"ezregex": "lineEndsWith('a')", "regex": "(?m)a$", "should": ["lklkjfda", "sdf 8 a", "a", "sdf\na", "sdfse\nsdafsda", "sdfa\nsdf"], "shouldnt": ["asdfds", "sd fd"]}, {"ezregex": "literal('test')", "regex": "test", "should": ["test", " sdfstestsdfs"], "shouldnt": ["te st"]}, {"ezregex": "underscore", "regex": "_", "should": ["_"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "quote", "regex": "(?:\\'|\"|`)", "should": ["\"", "'", "`"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "isExactly('test')", "regex": "\\Atest\\Z", "should": ["test"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "matchMax('a')", "regex": "(?:a)+", "should": ["aaa", "a"], "shouldnt": ["b"]}, {"ezregex": "matchMoreThan(3, 'a')", "regex": "(?:a){4,}", "should": ["aaaa", "tesaaaaaat"], "shouldnt": ["aaa", " aa"]}, {"ezregex": "matchAtLeast(3, 'a')", "regex": "(?:a){3,}", "should": ["aaa", "aaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a')", "regex": "a?", "should": ["", "a", "aa"], "shouldnt": []}, {"ezregex": "either('a', 'b')", "regex": "(?:a|b)", "should": ["a", "b"], "shouldnt": ["c"]}, {"ezregex": "either('aa', 'ba')", "regex": "(?:aa|ba)", "should": ["aa", "ba"], "shouldnt": ["bb", "a"]}, {"ezregex": "whitespace", "regex": "\\s", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "whitechunk", "regex": "\\s+", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "white", "regex": "\\s+", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "digit", "regex": "\\d", "should": ["6"], "shouldnt": ["_", "-", "a"]}, {"ezregex": "number", "regex": "\\d+", "should": ["6", "69"], "shouldnt": ["-a", "A"]}, {"ezregex": "punctuation", "regex": "[`\\~!@\\#\\$%\\^\\&\\*\\(\\)\\-_=\\+\\[\\{\\]\\}\\\\\\|;:'\",<\\.>/\\?\u00a2\\]]", "should": ["@", "#", "$", "%", "^", "&", "*", "(", ")"], "shouldnt": ["1", "2", "3", "4", "5", "6", "7", "8", "s", "d", "f", "s", "d", "f"]}, {"ezregex": "wordChar", "regex": "\\w", "should": ["w"], "shouldnt": ["-"]}, {"ezregex": "hex_digit", "regex": "[0-9a-fA-F]", "should": ["A", "a", "0"], "shouldnt": ["g", "G"]}, {"ezregex": "octDigit", "regex": "[0-7]", "should": ["7"], "shouldnt": ["9", "a", "A", "8"]}, {"ezregex": "chunk", "regex": ".+", "should": ["wordssdf   asdf\n"], "shouldnt": ["\n"]}, {"ezregex": "spaceOrTab", "regex": "[ \\t]", "should": [" ", "\t", " \t  "], "shouldnt": ["\n"]}, {"ezregex": "newLine", "regex": "\\n", "should": ["\n"], "shouldnt": ["\r"]}, {"ezregex": "carriageReturn", "regex": "\\r", "should": ["\r"], "shouldnt": ["\n"]}, {"ezregex": "tab", "regex": "\\t", "should": ["\t"], "shouldnt": [" "]}, {"ezregex": "space", "regex": " ", "should": [" "], "shouldnt": ["\t"]}, {"ezregex": "quote", "regex": "(?:\\'|\"|`)", "should": ["'", "\""], "shouldnt": ["wer"]}, {"ezregex": "comma", "regex": "\\,", "should": [","], "shouldnt": [".", "`"]}, {"ezregex": "period", "regex": "\\.", "should": ["."], "shouldnt": [","]}, {"ezregex": "matchRange(3, 5, 'a')", "regex": "(?:a){3,5}", "should": ["aaa", "aaaa", "aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "matchRange(3, 5, 'a', greedy=False)+'aa'", "regex": "(?:a){3,5}?aa", "should": ["aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a') + 'b'", "regex": "a?b", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "optional('a', greedy=False) + 'b'", "regex": "a??b", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "atLeastOne('a')", "regex": "a+", "should": ["a", "aa", "aaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeastOne('a', greedy=False)", "regex": "a+?", "should": ["a", "aa", "aaaaaaaaaaaaaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeast(0, 'a')", "regex": "(?:a){0,}", "should": ["", "a", "aaaaaaaaaa", "b"], "shouldnt": []}, {"ezregex": "(optional('a') + 'b') * 3", "regex": "a?ba?ba?b", "should": ["abbb", "bbb", "ababab", "bbab"], "shouldnt": ["", "aaa", "aa", "a"]}, {"ezregex": "word + whitechunk + group('func') + ':' + '()' + group(either('|', '7'), name='test')", "regex": "\\w+\\s+(func):\\(\\)(?P<test>(?:\\||7))", "should": ["wo  func:()|", "wo  func:()7"], "shouldnt": ["wo  func:[]|", "wo  func:(]7"]}, {"ezregex": "word + whitechunk + group('func') + ':' + group(anyof('8', '7'), 'test')", "regex": "\\w+\\s+(func):(?P<test>[87])", "should": ["wo  func:8", "wo  func:7"], "shouldnt": []}, {"ezregex": "7 + anyof('abc') + lineEnd", "regex": "(?m)7[abc]$", "should": ["7a", "sdfsd7b", "sdf\nsdf7b", "sdf\nsdf7b\n"], "shouldnt": ["7asdfsd", "7v"]}, {"ezregex": "7 + anyof('abc') + stringEnd", "regex": "7[abc]\\Z", "should": ["7a", "sdfsd7b"], "shouldnt": ["7asdfsd", "7v", "sdf\nsdf7bds", "sdf\nsdf7bf\n"]}, {"ezregex": "lineStart + 7 + anyof('abc')", "regex": "(?m)^7[abc]", "should": ["7a", "7bsdfsd", "\n7a", "\n7bsdfsd"], "shouldnt": ["ds7asdfsd", "7v"]}, {"ezregex": "stringStart + 7 + anyof('abc')", "regex": "\\A7[abc]", "should": ["7a", "7bsdfsd"], "shouldnt": ["ds7asdfsd", "7v", "\n7a", "\n7bsdfsd"]}, {"ezregex": "+alpha", "regex": "(?:[A-Za-z])+", "should": ["a", "asd"], "shouldnt": ["89", "._78"]}, {"ezregex": "+alphanum", "regex": "(?:[A-Za-z0-9_])+", "should": ["a", "asd", "3sd", "88"], "shouldnt": [".+"]}, {"ezregex": "raw(r'(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)')", "regex": "(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "'foo' + each(chunk + 'here' + chunk, chunk + anyOf('this', 'that') + chunk) + 'bar'", "regex": "foo(?=.+here.+).+(?:this|that).+bar", "should": ["fooum here there that bar", "foo that there here bar"], "shouldnt": []}, {"ezregex": "opt(group('<')) + group(word + '@' + word + +('.' + word)) + ifExists(1, '>', string_end)", "regex": "(?:(<))?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|\\Z)", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "match_range(1, 5, word + ' ')", "regex": "(?:\\w+\\ ){1,5}", "should": [], "shouldnt": []}, {"ezregex": "(match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ')", "regex": "(?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ ", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + match_max(group('me')) + amt(2, 'mhmm')", "regex": "(?P<i>pattern)(?:\\d)?(?:(me))+(?:mhmm){2}", "should": [], "shouldnt": []}, {"ezregex": "string_starts_with", "regex": "\\A", "should": [], "shouldnt": []}, {"ezregex": "string_ends_with", "regex": "\\Z", "should": [], "shouldnt": []}, {"ezregex": "line_starts_with", "regex": "(?m)^", "should": [], "shouldnt": []}, {"ezregex": "line_ends_with", "regex": "(?m)$", "should": [], "shouldnt": []}, {"ezregex": "word_boundary", "regex": "\\b", "should": [], "shouldnt": []}, {"ezregex": "not_word_boundary", "regex": "\\B", "should": [], "shouldnt": []}, {"ezregex": "tab", "regex": "\\t", "should": [], "shouldnt": []}, {"ezregex": "space", "regex": " ", "should": [], "shouldnt": []}, {"ezregex": "space_or_tab", "regex": "[ \\t]", "should": [], "shouldnt": []}, {"ezregex": "new_line", "regex": "\\n", "should": [], "shouldnt": []}, {"ezregex": "carriage_return", "regex": "\\r", "should": [], "shouldnt": []}, {"ezregex": "quote", "regex": "(?:\\'|\"|`)", "should": [], "shouldnt": []}, {"ezregex": "vertical_tab", "regex": "\\v", "should": [], "shouldnt": []}, {"ezregex": "form_feed", "regex": "\\f", "should": [], "shouldnt": []}, {"ezregex": "comma", "regex": "\\,", "should": [], "shouldnt": []}, {"ezregex": "period", "regex": "\\.", "should": [], "shouldnt": []}, {"ezregex": "underscore", "regex": "_", "should": [], "shouldnt": []}, {"ezregex": "any_between('a', 'b')", "regex": "[a-b]", "should": [], "shouldnt": []}, {"ezregex": "not_whitespace", "regex": "\\S", "should": [], "shouldnt": []}, {"ezregex": "not_digit", "regex": "\\D", "should": [], "shouldnt": []}, {"ezregex": "not_word", "regex": "\\W", "should": [], "shouldnt": []}, {"ezregex": "whitespace", "regex": "\\s", "should": [], "shouldnt": []}, {"ezregex": "whitechunk", "regex": "\\s+", "should": [], "shouldnt": []}, {"ezregex": "digit", "regex": "\\d", "should": [], "shouldnt": []}, {"ezregex": "number", "regex": "\\d+", "should": [], "shouldnt": []}, {"ezregex": "word", "regex": "\\w+", "should": [], "shouldnt": []}, {"ezregex": "word_char", "regex": "\\w", "should": [], "shouldnt": []}, {"ezregex": "anything", "regex": ".", "should": [], "shouldnt": []}, {"ezregex": "chunk", "regex": ".+", "should": [], "shouldnt": []}, {"ezregex": "uppercase", "regex": "[A-Z]", "should": [], "shouldnt": []}, {"ezregex": "lowercase", "regex": "[a-z]", "should": [], "shouldnt": []}, {"ezregex": "letter", "regex": "[A-Za-z]", "should": [], "shouldnt": []}, {"ezregex": "hex_digit", "regex": "[0-9a-fA-F]", "should": [], "shouldnt": []}, {"ezregex": "oct_digit", "regex": "[0-7]", "should": [], "shouldnt": []}, {"ezregex": "punctuation", "regex": "[`\\~!@\\#\\$%\\^\\&\\*\\(\\)\\-_=\\+\\[\\{\\]\\}\\\\\\|;:'\",<\\.>/\\?\u00a2\\]]", "should": [], "shouldnt": []}, {"ezregex": "controller", "regex": "[\\x00-\\x1F\\x7F]", "should": [], "shouldnt": []}, {"ezregex": "printable", "regex": "[\\x21-\\x7E]", "should": [], "shouldnt": []}, {"ezregex": "printable_and_space", "regex": "[\\x20-\\x7E]", "should": [], "shouldnt": []}, {"ezregex": "alpha_num", "regex": "[A-Za-z0-9_]", "should": [], "shouldnt": []}, {"ezregex": "match_max(digit)", "regex": "(?:\\d)+", "should": [], "shouldnt": []}, {"ezregex": "match_num(2, digit)", "regex": "(?:\\d){2}", "should": [], "shouldnt": []}, {"ezregex": "match_more_than(2, digit)", "regex": "(?:\\d){3,}", "should": [], "shouldnt": []}, {"ezregex": "match_at_least(2, digit)", "regex": "(?:\\d){2,}", "should": [], "shouldnt": []}, {"ezregex": "match_at_most(2, digit)", "regex": "(?:\\d){0,2}", "should": [], "shouldnt": []}, {"ezregex": "match_range(2, 4, digit)", "regex": "(?:\\d){2,4}", "should": [], "shouldnt": []}, {"ezregex": "at_least_one(digit)", "regex": "(?:\\d)+", "should": [], "shouldnt": []}, {"ezregex": "at_least_none(digit)", "regex": "(?:\\d)*", "should": [], "shouldnt": []}, {"ezregex": "optional(digit)", "regex": "(?:\\d)?", "should": [], "shouldnt": []}, {"ezregex": "either(digit, word)", "regex": "(?:\\d|\\w+)", "should": [], "shouldnt": []}, {"ezregex": "any_of(digit, word, 'a', 'b')", "regex": "(?:\\d|\\w+|a|b)", "should": [], "shouldnt": []}, {"ezregex": "any_char_except('abcd')", "regex": "[^abcd]", "should": [], "shouldnt": []}, {"ezregex": "if_proceded_by(digit)", "regex": "(?=\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_not_proceded_by(digit)", "regex": "(?!\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_preceded_by(digit)", "regex": "(?<=\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_not_preceded_by(digit)", "regex": "(?<!\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_enclosed_with('|', digit)", "regex": "((?<=\\|)\\d(?=\\|))", "should": [], "shouldnt": []}, {"ezregex": "group(digit)", "regex": "(\\d)", "should": [], "shouldnt": []}, {"ezregex": "passive_group(digit)", "regex": "(?:\\d)", "should": [], "shouldnt": []}, {"ezregex": "literally_anything", "regex": "(?:.|\\n)", "should": [], "shouldnt": []}, {"ezregex": "signed", "regex": "(?:(?:\\-|\\+))?\\d+", "should": [], "shouldnt": []}, {"ezregex": "unsigned", "regex": "\\d+", "should": [], "shouldnt": []}, {"ezregex": "plain_float", "regex": "(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?", "should": [], "shouldnt": []}, {"ezregex": "full_float", "regex": "(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?(?:e(?:(?:\\-|\\+))?\\d+)?", "should": [], "shouldnt": []}, {"ezregex": "int_or_float", "regex": "(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?(?:e(?:(?:\\-|\\+))?\\d+)?(?:\\-)?\\d+(?:\\.(?:\\d+)?)?", "should": [], "shouldnt": []}, {"ezregex": "ow", "regex": "(?:\\s+)?", "should": [], "shouldnt": []}, {"ezregex": "is_exactly(digit)", "regex": "\\A\\d\\Z", "should": [], "shouldnt": []}, {"ezregex": "literal('this')", "regex": "this", "should": [], "shouldnt": []}, {"ezregex": "digit + ASCII", "regex": "(?a)\\d", "should": [], "shouldnt": []}, {"ezregex": "digit + DOTALL", "regex": "(?s)\\d", "should": [], "shouldnt": []}, {"ezregex": "digit + IGNORECASE", "regex": "(?i)\\d", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + 'test'", "regex": "(?P<i>pattern)(?:\\d)?test", "should": [], "shouldnt": []}, {"ezregex": "digit + MULTILINE", "regex": "(?m)\\d", "should": [], "shouldnt": []}, {"ezregex": "'------------------LAST REGEX---------------------'", "regex": "------------------LAST REGEX---------------------", "should": ["------------------LAST REGEX---------------------"], "shouldnt": ["asdk"]}], "js": [{"ezregex": "'------------------FIRST REGEX---------------------'", "regex": "------------------FIRST REGEX---------------------", "should": ["------------------FIRST REGEX---------------------"], "shouldnt": ["asdk"]}, {"ezregex": "'stuff' + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "/stuff\\ (?:\\,)? (?=\\*)/", "should": ["stuff , *", "stuff  *"], "shouldnt": []}, {"ezregex": "'stuff' + anyof('a', 'b', 'c') + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "/stuff[abc]\\ (?:\\,)? (?=\\*)/", "should": ["stuffa , *", "stuffb  *"], "shouldnt": []}, {"ezregex": "anyof('a', 'b', 'c') + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "/[abc]\\ (?:\\,)? (?=\\*)/", "should": ["a , *", "b  *"], "shouldnt": []}, {"ezregex": "'stuff' + anyof('a', 'b', 'c')", "regex": "/stuff[abc]/", "should": ["stuffa", "stuffb"], "shouldnt": []}, {"ezregex": "anyof('a', 'b', 'c')", "regex": "/[abc]/", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "one_of('a', 'b', 'c')", "regex": "/[abc]/", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "'a' + ifFollowedBy('*')", "regex": "/a(?=\\*)/", "should": ["a*"], "shouldnt": []}, {"ezregex": "optional(comma) + space", "regex": "/(?:\\,)? /", "should": [", ", " "], "shouldnt": []}, {"ezregex": "optional(word + ow + ',' + ow) + group(word) + optional(',') + ow", "regex": "/(?:\\w+(?:\\s+)?,(?:\\s+)?)?(\\w+),?(?:\\s+)?/", "should": ["word\t ,word2, ", "word", "worddsfs    ", "word,   "], "shouldnt": ["", "  "]}, {"ezregex": "optional(whitechunk + 'as' + word)", "regex": "/(?:\\s+as\\w+)?/", "should": [" asword"], "shouldnt": []}, {"ezregex": "group(optional(matchMax(literal('.') + word)))", "regex": "/((?:(?:\\.\\w+)+)?)/", "should": ["..........word", ""], "shouldnt": []}, {"ezregex": "matchNum(3, either(\"'\", '\"'))", "regex": "/(?:(?:'|\")){3}/", "should": ["\"\"\""], "shouldnt": []}, {"ezregex": "matchNum(2, '0')", "regex": "/(?:0){2}/", "should": ["00"], "shouldnt": []}, {"ezregex": "matchNum(1, raw('6'))", "regex": "/(?:6){1}/", "should": ["6"], "shouldnt": []}, {"ezregex": "raw(r'\\A')", "regex": "/\\A/", "should": [""], "shouldnt": []}, {"ezregex": "raw(r'\\Z')", "regex": "/\\Z/", "should": [""], "shouldnt": []}, {"ezregex": "exactly('test')", "regex": "/\\Atest\\Z/", "should": ["test"], "shouldnt": []}, {"ezregex": "raw(r'(test)+')", "regex": "/(test)+/", "should": ["test", "testt", "testtt", "testttt"], "shouldnt": []}, {"ezregex": "raw(r'test+')", "regex": "/test+/", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'(test){3}')", "regex": "/(test){3}/", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3}')", "regex": "/test{3}/", "should": ["testttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,5}')", "regex": "/(test){3,5}/", "should": ["testtesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r\"(test){3, 5}\")", "regex": "/(test){3, 5}/", "should": [], "shouldnt": []}, {"ezregex": "raw(r\"test{3, 5}\")", "regex": "/test{3, 5}/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'test{3,5}')", "regex": "/test{3,5}/", "should": ["testttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,}')", "regex": "/(test){3,}/", "should": ["testtesttest", "testtesttesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3,}')", "regex": "/test{3,}/", "should": ["testttt", "testtttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'\\d')", "regex": "/\\d/", "should": ["0", "1", "2"], "shouldnt": []}, {"ezregex": "raw(r'\\s')", "regex": "/\\s/", "should": [" ", "\t", "\n"], "shouldnt": []}, {"ezregex": "raw(r'\\w')", "regex": "/\\w/", "should": ["a", "Z", "5", "_"], "shouldnt": []}, {"ezregex": "raw(r'\\w+')", "regex": "/\\w+/", "should": ["abc", "123", "test_"], "shouldnt": []}, {"ezregex": "raw(r'.')", "regex": "/./", "should": ["s", "a", "h", "r", "d", "h", "c", "f", "G", "S", "G", "D", "8", "7", "w", "3", "u", "e", "8", "4", "1", "2", "5", "a", "s", "d", "_", ";", ".", ",", "?", ".", "1", "3", "4", "*", "&", "^", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\n')", "regex": "/\\n/", "should": ["\n"], "shouldnt": []}, {"ezregex": "raw(r'\\r')", "regex": "/\\r/", "should": ["\r"], "shouldnt": []}, {"ezregex": "raw(r'\\t')", "regex": "/\\t/", "should": ["\t"], "shouldnt": []}, {"ezregex": "raw(r'\\f')", "regex": "/\\f/", "should": ["\f"], "shouldnt": []}, {"ezregex": "raw(r'\\S')", "regex": "/\\S/", "should": ["s", "d", "g", "S", "G", "H", "R", "5", "1", "2", "2", "$", "%", "^", "&", "*", "Z", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\D')", "regex": "/\\D/", "should": ["s", "d", "f", "G", "S", "D", "G", ";", "(", "[", "]"], "shouldnt": []}, {"ezregex": "raw(r'\\W')", "regex": "/\\W/", "should": ["/", "*", "-", "#", "^", "&", "*", "`", "?", ">", "<"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "/(stuff)?/", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(stuff)*')", "regex": "/(stuff)*/", "should": ["", "stuff", "stuffstuff", "stuffstuffstuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff|things)')", "regex": "/(stuff|things)/", "should": ["stuff", "things"], "shouldnt": []}, {"ezregex": "raw(r'[s,t]')", "regex": "/[s,t]/", "should": ["s", "t"], "shouldnt": []}, {"ezregex": "raw(r'[^s,t]')", "regex": "/[^s,t]/", "should": ["q", "w", "r", "u", "i", "o", "p", "a", "h", "j", "k", "B", "N", "M", "3", "4", "#", "$"], "shouldnt": []}, {"ezregex": "raw(r'(?=stuff)')", "regex": "/(?=stuff)/", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)')", "regex": "/(stuff)/", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "/(stuff)?/", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>stuff)')", "regex": "/(?P<name>stuff)/", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(?<!stuff)')", "regex": "/(?<!stuff)/", "should": ["thingstuffs"], "shouldnt": []}, {"ezregex": "raw(r'(a|b|c|thing|st)uff')", "regex": "/(a|b|c|thing|st)uff/", "should": ["auff", "buff", "cuff", "thinguff", "stuff"], "shouldnt": []}, {"ezregex": "raw(r'A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}')", "regex": "/A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[\\d] [^\\d] [A-Za-z0-9_]+ . .*')", "regex": "/[\\d] [^\\d] [A-Za-z0-9_]+ . .*/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'AB|CD AB|CD|EF|GH (AB|CD)*')", "regex": "/AB|CD AB|CD|EF|GH (AB|CD)*/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(a??) a*? a{3,}? ab{4,7}?')", "regex": "/(a??) a*? a{3,}? ab{4,7}?/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<test>ABC*) (?P<a>x)|(?P<b>y)')", "regex": "/(?P<test>ABC*) (?P<a>x)|(?P<b>y)/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[b:]+ (b)|(:+) a|(b)')", "regex": "/[b:]+ (b)|(:+) a|(b)/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?')", "regex": "/(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?/", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>[a-zA-Z]+)(?P=name)')", "regex": "/(?P<name>[a-zA-Z]+)(?P=name)/", "should": [], "shouldnt": []}, {"ezregex": "group(+letter, name='g') + earlierGroup('g')", "regex": "/(?P<g>(?:/[A-Za-z]/)+)(?P=g)/", "should": ["AA", "tt"], "shouldnt": ["ABt", "t", "9d9", "tdt"]}, {"ezregex": "group(+letter) + ' ' + earlierGroup(1)", "regex": "/((?:/[A-Za-z]/)+)\\ \\1/", "should": ["the the", "at at"], "shouldnt": ["att", "thethe"]}, {"ezregex": "raw(r'[AB\\]C] [--A] [ABC\\-D] [\\^ABC]')", "regex": "/[AB\\]C] [--A] [ABC\\-D] [\\^ABC]/", "should": [], "shouldnt": []}, {"ezregex": "stringStartsWith('a')", "regex": "/\\Aa/", "should": ["asdfs", "a 89sdf a", "a"], "shouldnt": [" asdf", "sdfa", "sdf"]}, {"ezregex": "lineStartsWith('a')", "regex": "/^am/", "should": ["asdfs", "a 89sdf a", "a", "sdfs\nasdfd"], "shouldnt": [" asdf", "sdf\nsdf", "sdf\n a", "sdfa", "sdf"]}, {"ezregex": "stringEndsWith('a')", "regex": "/a\\Z/", "should": ["lklkjfda", "sdf 8 a", "a"], "shouldnt": ["asdfds", "sd fd"]}, {"ezregex": "lineEndsWith('a')", "regex": "/a$m/", "should": ["lklkjfda", "sdf 8 a", "a", "sdf\na", "sdfse\nsdafsda", "sdfa\nsdf"], "shouldnt": ["asdfds", "sd fd"]}, {"ezregex": "literal('test')", "regex": "/test/", "should": ["test", " sdfstestsdfs"], "shouldnt": ["te st"]}, {"ezregex": "underscore", "regex": "/_/", "should": ["_"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "quote", "regex": "/(?:\\'|\"|`)/", "should": ["\"", "'", "`"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "isExactly('test')", "regex": "/\\Atest\\Z/", "should": ["test"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "matchMax('a')", "regex": "/(?:a)+/", "should": ["aaa", "a"], "shouldnt": ["b"]}, {"ezregex": "matchMoreThan(3, 'a')", "regex": "/(?:a){4,}/", "should": ["aaaa", "tesaaaaaat"], "shouldnt": ["aaa", " aa"]}, {"ezregex": "matchAtLeast(3, 'a')", "regex": "/(?:a){3,}/", "should": ["aaa", "aaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a')", "regex": "/a?/", "should": ["", "a", "aa"], "shouldnt": []}, {"ezregex": "either('a', 'b')", "regex": "/(?:a|b)/", "should": ["a", "b"], "shouldnt": ["c"]}, {"ezregex": "either('aa', 'ba')", "regex": "/(?:aa|ba)/", "should": ["aa", "ba"], "shouldnt": ["bb", "a"]}, {"ezregex": "whitespace", "regex": "/\\s/", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "whitechunk", "regex": "/\\s+/", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "white", "regex": "/\\s+/", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "digit", "regex": "/\\d/", "should": ["6"], "shouldnt": ["_", "-", "a"]}, {"ezregex": "number", "regex": "/\\d+/", "should": ["6", "69"], "shouldnt": ["-a", "A"]}, {"ezregex": "punctuation", "regex": "/[`\\~!@\\#\\$%\\^\\&\\*\\(\\)\\-_=\\+\\[\\{\\]\\}\\\\\\|;:'\",<\\.>/\\?\u00a2\\]]/", "should": ["@", "#", "$", "%", "^", "&", "*", "(", ")"], "shouldnt": ["1", "2", "3", "4", "5", "6", "7", "8", "s", "d", "f", "s", "d", "f"]}, {"ezregex": "wordChar", "regex": "/\\w/", "should": ["w"], "shouldnt": ["-"]}, {"ezregex": "hex_digit", "regex": "/[0-9a-fA-F]/", "should": ["A", "a", "0"], "shouldnt": ["g", "G"]}, {"ezregex": "octDigit", "regex": "/[0-7]/", "should": ["7"], "shouldnt": ["9", "a", "A", "8"]}, {"ezregex": "chunk", "regex": "/.+/", "should": ["wordssdf   asdf\n"], "shouldnt": ["\n"]}, {"ezregex": "spaceOrTab", "regex": "/[ \\t]/", "should": [" ", "\t", " \t  "], "shouldnt": ["\n"]}, {"ezregex": "newLine", "regex": "/\\n/", "should": ["\n"], "shouldnt": ["\r"]}, {"ezregex": "carriageReturn", "regex": "/\\r/", "should": ["\r"], "shouldnt": ["\n"]}, {"ezregex": "tab", "regex": "/\\t/", "should": ["\t"], "shouldnt": [" "]}, {"ezregex": "space", "regex": "/ /", "should": [" "], "shouldnt": ["\t"]}, {"ezregex": "quote", "regex": "/(?:\\'|\"|`)/", "should": ["'", "\""], "shouldnt": ["wer"]}, {"ezregex": "comma", "regex": "/\\,/", "should": [","], "shouldnt": [".", "`"]}, {"ezregex": "period", "regex": "/\\./", "should": ["."], "shouldnt": [","]}, {"ezregex": "matchRange(3, 5, 'a')", "regex": "/(?:a){3,5}/", "should": ["aaa", "aaaa", "aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "matchRange(3, 5, 'a', greedy=False)+'aa'", "regex": "/(?:a){3,5}?aa/", "should": ["aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a') + 'b'", "regex": "/a?b/", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "optional('a', greedy=False) + 'b'", "regex": "/a??b/", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "atLeastOne('a')", "regex": "/a+/", "should": ["a", "aa", "aaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeastOne('a', greedy=False)", "regex": "/a+?/", "should": ["a", "aa", "aaaaaaaaaaaaaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeast(0, 'a')", "regex": "/(?:a){0,}/", "should": ["", "a", "aaaaaaaaaa", "b"], "shouldnt": []}, {"ezregex": "(optional('a') + 'b') * 3", "regex": "/a?ba?ba?b/", "should": ["abbb", "bbb", "ababab", "bbab"], "shouldnt": ["", "aaa", "aa", "a"]}, {"ezregex": "word + whitechunk + group('func') + ':' + '()' + group(either('|', '7'), name='test')", "regex": "/\\w+\\s+(func):\\(\\)(?P<test>(?:\\||7))/", "should": ["wo  func:()|", "wo  func:()7"], "shouldnt": ["wo  func:[]|", "wo  func:(]7"]}, {"ezregex": "word + whitechunk + group('func') + ':' + group(anyof('8', '7'), 'test')", "regex": "/\\w+\\s+(func):(?P<test>[87])/", "should": ["wo  func:8", "wo  func:7"], "shouldnt": []}, {"ezregex": "7 + anyof('abc') + lineEnd", "regex": "/7[abc]$m/", "should": ["7a", "sdfsd7b", "sdf\nsdf7b", "sdf\nsdf7b\n"], "shouldnt": ["7asdfsd", "7v"]}, {"ezregex": "7 + anyof('abc') + stringEnd", "regex": "/7[abc]\\Z/", "should": ["7a", "sdfsd7b"], "shouldnt": ["7asdfsd", "7v", "sdf\nsdf7bds", "sdf\nsdf7bf\n"]}, {"ezregex": "lineStart + 7 + anyof('abc')", "regex": "/^7[abc]m/", "should": ["7a", "7bsdfsd", "\n7a", "\n7bsdfsd"], "shouldnt": ["ds7asdfsd", "7v"]}, {"ezregex": "stringStart + 7 + anyof('abc')", "regex": "/\\A7[abc]/", "should": ["7a", "7bsdfsd"], "shouldnt": ["ds7asdfsd", "7v", "\n7a", "\n7bsdfsd"]}, {"ezregex": "+alpha", "regex": "/(?:/[A-Za-z]/)+/", "should": ["a", "asd"], "shouldnt": ["89", "._78"]}, {"ezregex": "+alphanum", "regex": "/(?:/[A-Za-z0-9_]/)+/", "should": ["a", "asd", "3sd", "88"], "shouldnt": [".+"]}, {"ezregex": "raw(r'(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)')", "regex": "/(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)/", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "'foo' + each(chunk + 'here' + chunk, chunk + anyOf('this', 'that') + chunk) + 'bar'", "regex": "/foo(?=.+here.+).+(?:this|that).+bar/", "should": ["fooum here there that bar", "foo that there here bar"], "shouldnt": []}, {"ezregex": "opt(group('<')) + group(word + '@' + word + +('.' + word)) + ifExists(1, '>', string_end)", "regex": "/(?:(<))?(\\w+@\\w+(?:/\\.\\w+/)+)(?(1)>|\\Z)/", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "match_range(1, 5, word + ' ')", "regex": "/(?:\\w+\\ ){1,5}/", "should": [], "shouldnt": []}, {"ezregex": "(match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ')", "regex": "/(?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ /", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + match_max(group('me')) + amt(2, 'mhmm')", "regex": "/(?P<i>pattern)(?:\\d)?(?:(me))+(?:mhmm){2}/", "should": [], "shouldnt": []}, {"ezregex": "string_starts_with", "regex": "/\\A/", "should": [], "shouldnt": []}, {"ezregex": "string_ends_with", "regex": "/\\Z/", "should": [], "shouldnt": []}, {"ezregex": "line_starts_with", "regex": "/^m/", "should": [], "shouldnt": []}, {"ezregex": "line_ends_with", "regex": "/$m/", "should": [], "shouldnt": []}, {"ezregex": "word_boundary", "regex": "/\\b/", "should": [], "shouldnt": []}, {"ezregex": "not_word_boundary", "regex": "/\\B/", "should": [], "shouldnt": []}, {"ezregex": "tab", "regex": "/\\t/", "should": [], "shouldnt": []}, {"ezregex": "space", "regex": "/ /", "should": [], "shouldnt": []}, {"ezregex": "space_or_tab", "regex": "/[ \\t]/", "should": [], "shouldnt": []}, {"ezregex": "new_line", "regex": "/\\n/", "should": [], "shouldnt": []}, {"ezregex": "carriage_return", "regex": "/\\r/", "should": [], "shouldnt": []}, {"ezregex": "quote", "regex": "/(?:\\'|\"|`)/", "should": [], "shouldnt": []}, {"ezregex": "vertical_tab", "regex": "/\\v/", "should": [], "shouldnt": []}, {"ezregex": "form_feed", "regex": "/\\f/", "should": [], "shouldnt": []}, {"ezregex": "comma", "regex": "/\\,/", "should": [], "shouldnt": []}, {"ezregex": "period", "regex": "/\\./", "should": [], "shouldnt": []}, {"ezregex": "underscore", "regex": "/_/", "should": [], "shouldnt": []}, {"ezregex": "any_between('a', 'b')", "regex": "/[a-b]/", "should": [], "shouldnt": []}, {"ezregex": "not_whitespace", "regex": "/\\S/", "should": [], "shouldnt": []}, {"ezregex": "not_digit", "regex": "/\\D/", "should": [], "shouldnt": []}, {"ezregex": "not_word", "regex": "/\\W/", "should": [], "shouldnt": []}, {"ezregex": "whitespace", "regex": "/\\s/", "should": [], "shouldnt": []}, {"ezregex": "whitechunk", "regex": "/\\s+/", "should": [], "shouldnt": []}, {"ezregex": "digit", "regex": "/\\d/", "should": [], "shouldnt": []}, {"ezregex": "number", "regex": "/\\d+/", "should": [], "shouldnt": []}, {"ezregex": "word", "regex": "/\\w+/", "should": [], "shouldnt": []}, {"ezregex": "word_char", "regex": "/\\w/", "should": [], "shouldnt": []}, {"ezregex": "anything", "regex": "/./", "should": [], "shouldnt": []}, {"ezregex": "chunk", "regex": "/.+/", "should": [], "shouldnt": []}, {"ezregex": "uppercase", "regex": "/[A-Z]/", "should": [], "shouldnt": []}, {"ezregex": "lowercase", "regex": "/[a-z]/", "should": [], "shouldnt": []}, {"ezregex": "letter", "regex": "/[A-Za-z]/", "should": [], "shouldnt": []}, {"ezregex": "hex_digit", "regex": "/[0-9a-fA-F]/", "should": [], "shouldnt": []}, {"ezregex": "oct_digit", "regex": "/[0-7]/", "should": [], "shouldnt": []}, {"ezregex": "punctuation", "regex": "/[`\\~!@\\#\\$%\\^\\&\\*\\(\\)\\-_=\\+\\[\\{\\]\\}\\\\\\|;:'\",<\\.>/\\?\u00a2\\]]/", "should": [], "shouldnt": []}, {"ezregex": "controller", "regex": "/[\\x00-\\x1F\\x7F]/", "should": [], "shouldnt": []}, {"ezregex": "printable", "regex": "/[\\x21-\\x7E]/", "should": [], "shouldnt": []}, {"ezregex": "printable_and_space", "regex": "/[\\x20-\\x7E]/", "should": [], "shouldnt": []}, {"ezregex": "alpha_num", "regex": "/[A-Za-z0-9_]/", "should": [], "shouldnt": []}, {"ezregex": "match_max(digit)", "regex": "/(?:\\d)+/", "should": [], "shouldnt": []}, {"ezregex": "match_num(2, digit)", "regex": "/(?:\\d){2}/", "should": [], "shouldnt": []}, {"ezregex": "match_more_than(2, digit)", "regex": "/(?:\\d){3,}/", "should": [], "shouldnt": []}, {"ezregex": "match_at_least(2, digit)", "regex": "/(?:\\d){2,}/", "should": [], "shouldnt": []}, {"ezregex": "match_at_most(2, digit)", "regex": "/(?:\\d){0,2}/", "should": [], "shouldnt": []}, {"ezregex": "match_range(2, 4, digit)", "regex": "/(?:\\d){2,4}/", "should": [], "shouldnt": []}, {"ezregex": "at_least_one(digit)", "regex": "/(?:\\d)+/", "should": [], "shouldnt": []}, {"ezregex": "at_least_none(digit)", "regex": "/(?:\\d)*/", "should": [], "shouldnt": []}, {"ezregex": "optional(digit)", "regex": "/(?:\\d)?/", "should": [], "shouldnt": []}, {"ezregex": "either(digit, word)", "regex": "/(?:\\d|\\w+)/", "should": [], "shouldnt": []}, {"ezregex": "any_of(digit, word, 'a', 'b')", "regex": "/(?:\\d|\\w+|a|b)/", "should": [], "shouldnt": []}, {"ezregex": "any_char_except('abcd')", "regex": "/[^abcd]/", "should": [], "shouldnt": []}, {"ezregex": "if_proceded_by(digit)", "regex": "/(?=\\d)/", "should": [], "shouldnt": []}, {"ezregex": "if_not_proceded_by(digit)", "regex": "/(?!\\d)/", "should": [], "shouldnt": []}, {"ezregex": "if_preceded_by(digit)", "regex": "/(?<=\\d)/", "should": [], "shouldnt": []}, {"ezregex": "if_not_preceded_by(digit)", "regex": "/(?<!\\d)/", "should": [], "shouldnt": []}, {"ezregex": "if_enclosed_with('|', digit)", "regex": "/((?<=\\|)\\d(?=\\|))/", "should": [], "shouldnt": []}, {"ezregex": "group(digit)", "regex": "/(\\d)/", "should": [], "shouldnt": []}, {"ezregex": "passive_group(digit)", "regex": "/(?:\\d)/", "should": [], "shouldnt": []}, {"ezregex": "literally_anything", "regex": "/(?:.|\\n)/", "should": [], "shouldnt": []}, {"ezregex": "signed", "regex": "/(?:(?:\\-|\\+))?\\d+/", "should": [], "shouldnt": []}, {"ezregex": "unsigned", "regex": "/\\d+/", "should": [], "shouldnt": []}, {"ezregex": "plain_float", "regex": "/(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?/", "should": [], "shouldnt": []}, {"ezregex": "full_float", "regex": "/(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?(?:e(?:(?:\\-|\\+))?\\d+)?/", "should": [], "shouldnt": []}, {"ezregex": "int_or_float", "regex": "/(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?(?:e(?:(?:\\-|\\+))?\\d+)?(?:\\-)?\\d+(?:\\.(?:\\d+)?)?/", "should": [], "shouldnt": []}, {"ezregex": "ow", "regex": "/(?:\\s+)?/", "should": [], "shouldnt": []}, {"ezregex": "is_exactly(digit)", "regex": "/\\A\\d\\Z/", "should": [], "shouldnt": []}, {"ezregex": "literal('this')", "regex": "/this/", "should": [], "shouldnt": []}, {"ezregex": "digit + ASCII", "regex": "/\\da/", "should": [], "shouldnt": []}, {"ezregex": "digit + DOTALL", "regex": "/\\ds/", "should": [], "shouldnt": []}, {"ezregex": "digit + IGNORECASE", "regex": "/\\di/", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + 'test'", "regex": "/(?P<i>pattern)(?:\\d)?test/", "should": [], "shouldnt": []}, {"ezregex": "digit + MULTILINE", "regex": "/\\dm/", "should": [], "shouldnt": []}, {"ezregex": "'------------------LAST REGEX---------------------'", "regex": "------------------LAST REGEX---------------------", "should": ["------------------LAST REGEX---------------------"], "shouldnt": ["asdk"]}], "r": [{"ezregex": "'------------------FIRST REGEX---------------------'", "regex": "------------------FIRST REGEX---------------------", "should": ["------------------FIRST REGEX---------------------"], "shouldnt": ["asdk"]}, {"ezregex": "'stuff' + anyof('a', 'b', 'c')", "regex": "stuff[abc]", "should": ["stuffa", "stuffb"], "shouldnt": []}, {"ezregex": "anyof('a', 'b', 'c')", "regex": "[abc]", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "one_of('a', 'b', 'c')", "regex": "[abc]", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "optional(comma) + space", "regex": "(?:\\\\,)? ", "should": [", ", " "], "shouldnt": []}, {"ezregex": "optional(word + ow + ',' + ow) + group(word) + optional(',') + ow", "regex": "(?:\\\\w+(?:\\\\s+)?,(?:\\\\s+)?)?(\\\\w+),?(?:\\\\s+)?", "should": ["word\t ,word2, ", "word", "worddsfs    ", "word,   "], "shouldnt": ["", "  "]}, {"ezregex": "optional(whitechunk + 'as' + word)", "regex": "(?:\\\\s+as\\\\w+)?", "should": [" asword"], "shouldnt": []}, {"ezregex": "group(optional(matchMax(literal('.') + word)))", "regex": "((?:(?:\\\\.\\\\w+)+)?)", "should": ["..........word", ""], "shouldnt": []}, {"ezregex": "matchNum(3, either(\"'\", '\"'))", "regex": "(?:(?:'|\")){3}", "should": ["\"\"\""], "shouldnt": []}, {"ezregex": "matchNum(2, '0')", "regex": "(?:0){2}", "should": ["00"], "shouldnt": []}, {"ezregex": "matchNum(1, raw('6'))", "regex": "(?:6){1}", "should": ["6"], "shouldnt": []}, {"ezregex": "raw(r'\\A')", "regex": "\\\\A", "should": [""], "shouldnt": []}, {"ezregex": "raw(r'\\Z')", "regex": "\\\\Z", "should": [""], "shouldnt": []}, {"ezregex": "exactly('test')", "regex": "\\\\Atest\\\\Z", "should": ["test"], "shouldnt": []}, {"ezregex": "raw(r'(test)+')", "regex": "(test)+", "should": ["test", "testt", "testtt", "testttt"], "shouldnt": []}, {"ezregex": "raw(r'test+')", "regex": "test+", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'(test){3}')", "regex": "(test){3}", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3}')", "regex": "test{3}", "should": ["testttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,5}')", "regex": "(test){3,5}", "should": ["testtesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r\"(test){3, 5}\")", "regex": "(test){3, 5}", "should": [], "shouldnt": []}, {"ezregex": "raw(r\"test{3, 5}\")", "regex": "test{3, 5}", "should": [], "shouldnt": []}, {"ezregex": "raw(r'test{3,5}')", "regex": "test{3,5}", "should": ["testttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,}')", "regex": "(test){3,}", "should": ["testtesttest", "testtesttesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3,}')", "regex": "test{3,}", "should": ["testttt", "testtttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'\\d')", "regex": "\\\\d", "should": ["0", "1", "2"], "shouldnt": []}, {"ezregex": "raw(r'\\s')", "regex": "\\\\s", "should": [" ", "\t", "\n"], "shouldnt": []}, {"ezregex": "raw(r'\\w')", "regex": "\\\\w", "should": ["a", "Z", "5", "_"], "shouldnt": []}, {"ezregex": "raw(r'\\w+')", "regex": "\\\\w+", "should": ["abc", "123", "test_"], "shouldnt": []}, {"ezregex": "raw(r'.')", "regex": ".", "should": ["s", "a", "h", "r", "d", "h", "c", "f", "G", "S", "G", "D", "8", "7", "w", "3", "u", "e", "8", "4", "1", "2", "5", "a", "s", "d", "_", ";", ".", ",", "?", ".", "1", "3", "4", "*", "&", "^", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\n')", "regex": "\\\\n", "should": ["\n"], "shouldnt": []}, {"ezregex": "raw(r'\\r')", "regex": "\\\\r", "should": ["\r"], "shouldnt": []}, {"ezregex": "raw(r'\\t')", "regex": "\\\\t", "should": ["\t"], "shouldnt": []}, {"ezregex": "raw(r'\\f')", "regex": "\\\\f", "should": ["\f"], "shouldnt": []}, {"ezregex": "raw(r'\\S')", "regex": "\\\\S", "should": ["s", "d", "g", "S", "G", "H", "R", "5", "1", "2", "2", "$", "%", "^", "&", "*", "Z", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\D')", "regex": "\\\\D", "should": ["s", "d", "f", "G", "S", "D", "G", ";", "(", "[", "]"], "shouldnt": []}, {"ezregex": "raw(r'\\W')", "regex": "\\\\W", "should": ["/", "*", "-", "#", "^", "&", "*", "`", "?", ">", "<"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "(stuff)?", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(stuff)*')", "regex": "(stuff)*", "should": ["", "stuff", "stuffstuff", "stuffstuffstuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff|things)')", "regex": "(stuff|things)", "should": ["stuff", "things"], "shouldnt": []}, {"ezregex": "raw(r'[s,t]')", "regex": "[s,t]", "should": ["s", "t"], "shouldnt": []}, {"ezregex": "raw(r'[^s,t]')", "regex": "[^s,t]", "should": ["q", "w", "r", "u", "i", "o", "p", "a", "h", "j", "k", "B", "N", "M", "3", "4", "#", "$"], "shouldnt": []}, {"ezregex": "raw(r'(?=stuff)')", "regex": "(?=stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)')", "regex": "(stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "(stuff)?", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>stuff)')", "regex": "(?P<name>stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(?<!stuff)')", "regex": "(?<!stuff)", "should": ["thingstuffs"], "shouldnt": []}, {"ezregex": "raw(r'(a|b|c|thing|st)uff')", "regex": "(a|b|c|thing|st)uff", "should": ["auff", "buff", "cuff", "thinguff", "stuff"], "shouldnt": []}, {"ezregex": "raw(r'A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}')", "regex": "A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[\\d] [^\\d] [A-Za-z0-9_]+ . .*')", "regex": "[\\\\d] [^\\\\d] [A-Za-z0-9_]+ . .*", "should": [], "shouldnt": []}, {"ezregex": "raw(r'AB|CD AB|CD|EF|GH (AB|CD)*')", "regex": "AB|CD AB|CD|EF|GH (AB|CD)*", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(a??) a*? a{3,}? ab{4,7}?')", "regex": "(a??) a*? a{3,}? ab{4,7}?", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<test>ABC*) (?P<a>x)|(?P<b>y)')", "regex": "(?P<test>ABC*) (?P<a>x)|(?P<b>y)", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[b:]+ (b)|(:+) a|(b)')", "regex": "[b:]+ (b)|(:+) a|(b)", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?')", "regex": "(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>[a-zA-Z]+)(?P=name)')", "regex": "(?P<name>[a-zA-Z]+)(?P=name)", "should": [], "shouldnt": []}, {"ezregex": "group(+letter, name='g') + earlierGroup('g')", "regex": "(?P<g>(?:[A-Za-z])+)(?P=g)", "should": ["AA", "tt"], "shouldnt": ["ABt", "t", "9d9", "tdt"]}, {"ezregex": "group(+letter) + ' ' + earlierGroup(1)", "regex": "((?:[A-Za-z])+)\\\\ \\\\1", "should": ["the the", "at at"], "shouldnt": ["att", "thethe"]}, {"ezregex": "raw(r'[AB\\]C] [--A] [ABC\\-D] [\\^ABC]')", "regex": "[AB\\\\]C] [--A] [ABC\\\\-D] [\\\\^ABC]", "should": [], "shouldnt": []}, {"ezregex": "stringStartsWith('a')", "regex": "\\\\Aa", "should": ["asdfs", "a 89sdf a", "a"], "shouldnt": [" asdf", "sdfa", "sdf"]}, {"ezregex": "literal('test')", "regex": "test", "should": ["test", " sdfstestsdfs"], "shouldnt": ["te st"]}, {"ezregex": "underscore", "regex": "_", "should": ["_"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "quote", "regex": "(?:\\\\'|\"|`)", "should": ["\"", "'", "`"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "isExactly('test')", "regex": "\\\\Atest\\\\Z", "should": ["test"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "matchMax('a')", "regex": "(?:a)+", "should": ["aaa", "a"], "shouldnt": ["b"]}, {"ezregex": "matchMoreThan(3, 'a')", "regex": "(?:a){4,}", "should": ["aaaa", "tesaaaaaat"], "shouldnt": ["aaa", " aa"]}, {"ezregex": "matchAtLeast(3, 'a')", "regex": "(?:a){3,}", "should": ["aaa", "aaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a')", "regex": "a?", "should": ["", "a", "aa"], "shouldnt": []}, {"ezregex": "either('a', 'b')", "regex": "(?:a|b)", "should": ["a", "b"], "shouldnt": ["c"]}, {"ezregex": "either('aa', 'ba')", "regex": "(?:aa|ba)", "should": ["aa", "ba"], "shouldnt": ["bb", "a"]}, {"ezregex": "whitespace", "regex": "\\\\s", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "whitechunk", "regex": "\\\\s+", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "white", "regex": "\\\\s+", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "digit", "regex": "\\\\d", "should": ["6"], "shouldnt": ["_", "-", "a"]}, {"ezregex": "number", "regex": "\\\\d+", "should": ["6", "69"], "shouldnt": ["-a", "A"]}, {"ezregex": "punctuation", "regex": "[`\\\\~!@\\\\#\\\\$%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-_=\\\\+\\\\[\\\\{\\\\]\\\\}\\\\\\\\\\\\|;:'\",<\\\\.>/\\\\?\u00a2\\\\]]", "should": ["@", "#", "$", "%", "^", "&", "*", "(", ")"], "shouldnt": ["1", "2", "3", "4", "5", "6", "7", "8", "s", "d", "f", "s", "d", "f"]}, {"ezregex": "wordChar", "regex": "\\\\w", "should": ["w"], "shouldnt": ["-"]}, {"ezregex": "hex_digit", "regex": "[0-9a-fA-F]", "should": ["A", "a", "0"], "shouldnt": ["g", "G"]}, {"ezregex": "octDigit", "regex": "[0-7]", "should": ["7"], "shouldnt": ["9", "a", "A", "8"]}, {"ezregex": "chunk", "regex": ".+", "should": ["wordssdf   asdf\n"], "shouldnt": ["\n"]}, {"ezregex": "spaceOrTab", "regex": "[ \\\\t]", "should": [" ", "\t", " \t  "], "shouldnt": ["\n"]}, {"ezregex": "newLine", "regex": "\\\\n", "should": ["\n"], "shouldnt": ["\r"]}, {"ezregex": "carriageReturn", "regex": "\\\\r", "should": ["\r"], "shouldnt": ["\n"]}, {"ezregex": "tab", "regex": "\\\\t", "should": ["\t"], "shouldnt": [" "]}, {"ezregex": "space", "regex": " ", "should": [" "], "shouldnt": ["\t"]}, {"ezregex": "quote", "regex": "(?:\\\\'|\"|`)", "should": ["'", "\""], "shouldnt": ["wer"]}, {"ezregex": "comma", "regex": "\\\\,", "should": [","], "shouldnt": [".", "`"]}, {"ezregex": "period", "regex": "\\\\.", "should": ["."], "shouldnt": [","]}, {"ezregex": "matchRange(3, 5, 'a')", "regex": "(?:a){3,5}", "should": ["aaa", "aaaa", "aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "matchRange(3, 5, 'a', greedy=False)+'aa'", "regex": "(?:a){3,5}?aa", "should": ["aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a') + 'b'", "regex": "a?b", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "optional('a', greedy=False) + 'b'", "regex": "a??b", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "atLeastOne('a')", "regex": "a+", "should": ["a", "aa", "aaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeastOne('a', greedy=False)", "regex": "a+?", "should": ["a", "aa", "aaaaaaaaaaaaaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeast(0, 'a')", "regex": "(?:a){0,}", "should": ["", "a", "aaaaaaaaaa", "b"], "shouldnt": []}, {"ezregex": "(optional('a') + 'b') * 3", "regex": "a?ba?ba?b", "should": ["abbb", "bbb", "ababab", "bbab"], "shouldnt": ["", "aaa", "aa", "a"]}, {"ezregex": "word + whitechunk + group('func') + ':' + '()' + group(either('|', '7'), name='test')", "regex": "\\\\w+\\\\s+(func):\\\\(\\\\)(?P<test>(?:\\\\||7))", "should": ["wo  func:()|", "wo  func:()7"], "shouldnt": ["wo  func:[]|", "wo  func:(]7"]}, {"ezregex": "word + whitechunk + group('func') + ':' + group(anyof('8', '7'), 'test')", "regex": "\\\\w+\\\\s+(func):(?P<test>[87])", "should": ["wo  func:8", "wo  func:7"], "shouldnt": []}, {"ezregex": "+alpha", "regex": "(?:[A-Za-z])+", "should": ["a", "asd"], "shouldnt": ["89", "._78"]}, {"ezregex": "+alphanum", "regex": "(?:[A-Za-z0-9_])+", "should": ["a", "asd", "3sd", "88"], "shouldnt": [".+"]}, {"ezregex": "raw(r'(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)')", "regex": "(<)?(\\\\w+@\\\\w+(?:\\\\.\\\\w+)+)(?(1)>|$)", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "opt(group('<')) + group(word + '@' + word + +('.' + word)) + ifExists(1, '>', string_end)", "regex": "(?:(<))?(\\\\w+@\\\\w+(?:\\\\\\\\.\\\\\\\\w+)+)(?(1)>|\\\\Z)", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "match_range(1, 5, word + ' ')", "regex": "(?:\\\\w+\\\\ ){1,5}", "should": [], "shouldnt": []}, {"ezregex": "(match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ')", "regex": "(?:\\\\w){3,5}\\\\ (?:\\\\w){3,5}\\\\ (?:\\\\w){3,5}\\\\ (?:\\\\w){3,5}\\\\ (?:\\\\w){3,5}\\\\ (?:\\\\w){3,5}\\\\ ", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + match_max(group('me')) + amt(2, 'mhmm')", "regex": "(?P<i>pattern)(?:\\\\d)?(?:(me))+(?:mhmm){2}", "should": [], "shouldnt": []}, {"ezregex": "string_starts_with", "regex": "\\\\A", "should": [], "shouldnt": []}, {"ezregex": "string_ends_with", "regex": "\\\\Z", "should": [], "shouldnt": []}, {"ezregex": "word_boundary", "regex": "\\\\b", "should": [], "shouldnt": []}, {"ezregex": "not_word_boundary", "regex": "\\\\B", "should": [], "shouldnt": []}, {"ezregex": "tab", "regex": "\\\\t", "should": [], "shouldnt": []}, {"ezregex": "space", "regex": " ", "should": [], "shouldnt": []}, {"ezregex": "space_or_tab", "regex": "[ \\\\t]", "should": [], "shouldnt": []}, {"ezregex": "new_line", "regex": "\\\\n", "should": [], "shouldnt": []}, {"ezregex": "carriage_return", "regex": "\\\\r", "should": [], "shouldnt": []}, {"ezregex": "quote", "regex": "(?:\\\\'|\"|`)", "should": [], "shouldnt": []}, {"ezregex": "vertical_tab", "regex": "\\\\v", "should": [], "shouldnt": []}, {"ezregex": "form_feed", "regex": "\\\\f", "should": [], "shouldnt": []}, {"ezregex": "comma", "regex": "\\\\,", "should": [], "shouldnt": []}, {"ezregex": "period", "regex": "\\\\.", "should": [], "shouldnt": []}, {"ezregex": "underscore", "regex": "_", "should": [], "shouldnt": []}, {"ezregex": "any_between('a', 'b')", "regex": "[a-b]", "should": [], "shouldnt": []}, {"ezregex": "not_whitespace", "regex": "\\\\S", "should": [], "shouldnt": []}, {"ezregex": "not_digit", "regex": "\\\\D", "should": [], "shouldnt": []}, {"ezregex": "not_word", "regex": "\\\\W", "should": [], "shouldnt": []}, {"ezregex": "whitespace", "regex": "\\\\s", "should": [], "shouldnt": []}, {"ezregex": "whitechunk", "regex": "\\\\s+", "should": [], "shouldnt": []}, {"ezregex": "digit", "regex": "\\\\d", "should": [], "shouldnt": []}, {"ezregex": "number", "regex": "\\\\d+", "should": [], "shouldnt": []}, {"ezregex": "word", "regex": "\\\\w+", "should": [], "shouldnt": []}, {"ezregex": "word_char", "regex": "\\\\w", "should": [], "shouldnt": []}, {"ezregex": "anything", "regex": ".", "should": [], "shouldnt": []}, {"ezregex": "chunk", "regex": ".+", "should": [], "shouldnt": []}, {"ezregex": "uppercase", "regex": "[A-Z]", "should": [], "shouldnt": []}, {"ezregex": "lowercase", "regex": "[a-z]", "should": [], "shouldnt": []}, {"ezregex": "letter", "regex": "[A-Za-z]", "should": [], "shouldnt": []}, {"ezregex": "hex_digit", "regex": "[0-9a-fA-F]", "should": [], "shouldnt": []}, {"ezregex": "oct_digit", "regex": "[0-7]", "should": [], "shouldnt": []}, {"ezregex": "punctuation", "regex": "[`\\\\~!@\\\\#\\\\$%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\-_=\\\\+\\\\[\\\\{\\\\]\\\\}\\\\\\\\\\\\|;:'\",<\\\\.>/\\\\?\u00a2\\\\]]", "should": [], "shouldnt": []}, {"ezregex": "controller", "regex": "[\\\\x00-\\\\x1F\\\\x7F]", "should": [], "shouldnt": []}, {"ezregex": "printable", "regex": "[\\\\x21-\\\\x7E]", "should": [], "shouldnt": []}, {"ezregex": "printable_and_space", "regex": "[\\\\x20-\\\\x7E]", "should": [], "shouldnt": []}, {"ezregex": "alpha_num", "regex": "[A-Za-z0-9_]", "should": [], "shouldnt": []}, {"ezregex": "match_max(digit)", "regex": "(?:\\\\d)+", "should": [], "shouldnt": []}, {"ezregex": "match_num(2, digit)", "regex": "(?:\\\\d){2}", "should": [], "shouldnt": []}, {"ezregex": "match_more_than(2, digit)", "regex": "(?:\\\\d){3,}", "should": [], "shouldnt": []}, {"ezregex": "match_at_least(2, digit)", "regex": "(?:\\\\d){2,}", "should": [], "shouldnt": []}, {"ezregex": "match_at_most(2, digit)", "regex": "(?:\\\\d){0,2}", "should": [], "shouldnt": []}, {"ezregex": "match_range(2, 4, digit)", "regex": "(?:\\\\d){2,4}", "should": [], "shouldnt": []}, {"ezregex": "at_least_one(digit)", "regex": "(?:\\\\d)+", "should": [], "shouldnt": []}, {"ezregex": "at_least_none(digit)", "regex": "(?:\\\\d)*", "should": [], "shouldnt": []}, {"ezregex": "optional(digit)", "regex": "(?:\\\\d)?", "should": [], "shouldnt": []}, {"ezregex": "either(digit, word)", "regex": "(?:\\\\d|\\\\w+)", "should": [], "shouldnt": []}, {"ezregex": "any_of(digit, word, 'a', 'b')", "regex": "(?:\\\\d|\\\\w+|a|b)", "should": [], "shouldnt": []}, {"ezregex": "any_char_except('abcd')", "regex": "[^abcd]", "should": [], "shouldnt": []}, {"ezregex": "group(digit)", "regex": "(\\\\d)", "should": [], "shouldnt": []}, {"ezregex": "passive_group(digit)", "regex": "(?:\\\\d)", "should": [], "shouldnt": []}, {"ezregex": "literally_anything", "regex": "(?:.|\\\\n)", "should": [], "shouldnt": []}, {"ezregex": "signed", "regex": "(?:(?:\\\\-|\\\\+))?\\\\d+", "should": [], "shouldnt": []}, {"ezregex": "unsigned", "regex": "\\\\d+", "should": [], "shouldnt": []}, {"ezregex": "plain_float", "regex": "(?:(?:\\\\-|\\\\+))?\\\\d+\\\\.(?:\\\\d+)?", "should": [], "shouldnt": []}, {"ezregex": "full_float", "regex": "(?:(?:\\\\-|\\\\+))?\\\\d+\\\\.(?:\\\\d+)?(?:e(?:(?:\\\\-|\\\\+))?\\\\d+)?", "should": [], "shouldnt": []}, {"ezregex": "int_or_float", "regex": "(?:(?:\\\\-|\\\\+))?\\\\d+\\\\.(?:\\\\d+)?(?:e(?:(?:\\\\-|\\\\+))?\\\\d+)?(?:\\\\-)?\\\\d+(?:\\\\.(?:\\\\d+)?)?", "should": [], "shouldnt": []}, {"ezregex": "ow", "regex": "(?:\\\\s+)?", "should": [], "shouldnt": []}, {"ezregex": "is_exactly(digit)", "regex": "\\\\A\\\\d\\\\Z", "should": [], "shouldnt": []}, {"ezregex": "literal('this')", "regex": "this", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + 'test'", "regex": "(?P<i>pattern)(?:\\\\d)?test", "should": [], "shouldnt": []}, {"ezregex": "'------------------LAST REGEX---------------------'", "regex": "------------------LAST REGEX---------------------", "should": ["------------------LAST REGEX---------------------"], "shouldnt": ["asdk"]}], "pcre": [{"ezregex": "'------------------FIRST REGEX---------------------'", "regex": "------------------FIRST REGEX---------------------", "should": ["------------------FIRST REGEX---------------------"], "shouldnt": ["asdk"]}, {"ezregex": "'stuff' + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "stuff\\ (?:\\,)? (?=\\*)", "should": ["stuff , *", "stuff  *"], "shouldnt": []}, {"ezregex": "'stuff' + anyof('a', 'b', 'c') + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "stuff[abc]\\ (?:\\,)? (?=\\*)", "should": ["stuffa , *", "stuffb  *"], "shouldnt": []}, {"ezregex": "anyof('a', 'b', 'c') + ' ' + optional(comma) + space + ifFollowedBy('*')", "regex": "[abc]\\ (?:\\,)? (?=\\*)", "should": ["a , *", "b  *"], "shouldnt": []}, {"ezregex": "'stuff' + anyof('a', 'b', 'c')", "regex": "stuff[abc]", "should": ["stuffa", "stuffb"], "shouldnt": []}, {"ezregex": "anyof('a', 'b', 'c')", "regex": "[abc]", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "one_of('a', 'b', 'c')", "regex": "[abc]", "should": ["a", "b", "c"], "shouldnt": []}, {"ezregex": "'a' + ifFollowedBy('*')", "regex": "a(?=\\*)", "should": ["a*"], "shouldnt": []}, {"ezregex": "optional(comma) + space", "regex": "(?:\\,)? ", "should": [", ", " "], "shouldnt": []}, {"ezregex": "optional(word + ow + ',' + ow) + group(word) + optional(',') + ow", "regex": "(?:\\w+(?:\\s+)?,(?:\\s+)?)?(\\w+),?(?:\\s+)?", "should": ["word\t ,word2, ", "word", "worddsfs    ", "word,   "], "shouldnt": ["", "  "]}, {"ezregex": "optional(whitechunk + 'as' + word)", "regex": "(?:\\s+as\\w+)?", "should": [" asword"], "shouldnt": []}, {"ezregex": "group(optional(matchMax(literal('.') + word)))", "regex": "((?:(?:\\.\\w+)+)?)", "should": ["..........word", ""], "shouldnt": []}, {"ezregex": "matchNum(3, either(\"'\", '\"'))", "regex": "(?:(?:'|\")){3}", "should": ["\"\"\""], "shouldnt": []}, {"ezregex": "matchNum(2, '0')", "regex": "(?:0){2}", "should": ["00"], "shouldnt": []}, {"ezregex": "matchNum(1, raw('6'))", "regex": "(?:6){1}", "should": ["6"], "shouldnt": []}, {"ezregex": "raw(r'\\A')", "regex": "\\A", "should": [""], "shouldnt": []}, {"ezregex": "raw(r'\\Z')", "regex": "\\Z", "should": [""], "shouldnt": []}, {"ezregex": "exactly('test')", "regex": "\\Atest\\Z", "should": ["test"], "shouldnt": []}, {"ezregex": "raw(r'(test)+')", "regex": "(test)+", "should": ["test", "testt", "testtt", "testttt"], "shouldnt": []}, {"ezregex": "raw(r'test+')", "regex": "test+", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'(test){3}')", "regex": "(test){3}", "should": ["testtesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3}')", "regex": "test{3}", "should": ["testttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,5}')", "regex": "(test){3,5}", "should": ["testtesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r\"(test){3, 5}\")", "regex": "(test){3, 5}", "should": [], "shouldnt": []}, {"ezregex": "raw(r\"test{3, 5}\")", "regex": "test{3, 5}", "should": [], "shouldnt": []}, {"ezregex": "raw(r'test{3,5}')", "regex": "test{3,5}", "should": ["testttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'(test){3,}')", "regex": "(test){3,}", "should": ["testtesttest", "testtesttesttest", "testtesttesttesttest"], "shouldnt": []}, {"ezregex": "raw(r'test{3,}')", "regex": "test{3,}", "should": ["testttt", "testtttt", "testttttt"], "shouldnt": []}, {"ezregex": "raw(r'\\d')", "regex": "\\d", "should": ["0", "1", "2"], "shouldnt": []}, {"ezregex": "raw(r'\\s')", "regex": "\\s", "should": [" ", "\t", "\n"], "shouldnt": []}, {"ezregex": "raw(r'\\w')", "regex": "\\w", "should": ["a", "Z", "5", "_"], "shouldnt": []}, {"ezregex": "raw(r'\\w+')", "regex": "\\w+", "should": ["abc", "123", "test_"], "shouldnt": []}, {"ezregex": "raw(r'.')", "regex": ".", "should": ["s", "a", "h", "r", "d", "h", "c", "f", "G", "S", "G", "D", "8", "7", "w", "3", "u", "e", "8", "4", "1", "2", "5", "a", "s", "d", "_", ";", ".", ",", "?", ".", "1", "3", "4", "*", "&", "^", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\n')", "regex": "\\n", "should": ["\n"], "shouldnt": []}, {"ezregex": "raw(r'\\r')", "regex": "\\r", "should": ["\r"], "shouldnt": []}, {"ezregex": "raw(r'\\t')", "regex": "\\t", "should": ["\t"], "shouldnt": []}, {"ezregex": "raw(r'\\f')", "regex": "\\f", "should": ["\f"], "shouldnt": []}, {"ezregex": "raw(r'\\S')", "regex": "\\S", "should": ["s", "d", "g", "S", "G", "H", "R", "5", "1", "2", "2", "$", "%", "^", "&", "*", "Z", "`"], "shouldnt": []}, {"ezregex": "raw(r'\\D')", "regex": "\\D", "should": ["s", "d", "f", "G", "S", "D", "G", ";", "(", "[", "]"], "shouldnt": []}, {"ezregex": "raw(r'\\W')", "regex": "\\W", "should": ["/", "*", "-", "#", "^", "&", "*", "`", "?", ">", "<"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "(stuff)?", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(stuff)*')", "regex": "(stuff)*", "should": ["", "stuff", "stuffstuff", "stuffstuffstuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff|things)')", "regex": "(stuff|things)", "should": ["stuff", "things"], "shouldnt": []}, {"ezregex": "raw(r'[s,t]')", "regex": "[s,t]", "should": ["s", "t"], "shouldnt": []}, {"ezregex": "raw(r'[^s,t]')", "regex": "[^s,t]", "should": ["q", "w", "r", "u", "i", "o", "p", "a", "h", "j", "k", "B", "N", "M", "3", "4", "#", "$"], "shouldnt": []}, {"ezregex": "raw(r'(?=stuff)')", "regex": "(?=stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)')", "regex": "(stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(stuff)?')", "regex": "(stuff)?", "should": ["stuff", ""], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>stuff)')", "regex": "(?P<name>stuff)", "should": ["stuff"], "shouldnt": []}, {"ezregex": "raw(r'(?<!stuff)')", "regex": "(?<!stuff)", "should": ["thingstuffs"], "shouldnt": []}, {"ezregex": "raw(r'(a|b|c|thing|st)uff')", "regex": "(a|b|c|thing|st)uff", "should": ["auff", "buff", "cuff", "thinguff", "stuff"], "shouldnt": []}, {"ezregex": "raw(r'A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}')", "regex": "A AB ABC [^A] [^ABC] A+ A* A? AA* A{2} A{2,4} A{9,12} A{2,} A{,9}", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[\\d] [^\\d] [A-Za-z0-9_]+ . .*')", "regex": "[\\d] [^\\d] [A-Za-z0-9_]+ . .*", "should": [], "shouldnt": []}, {"ezregex": "raw(r'AB|CD AB|CD|EF|GH (AB|CD)*')", "regex": "AB|CD AB|CD|EF|GH (AB|CD)*", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(a??) a*? a{3,}? ab{4,7}?')", "regex": "(a??) a*? a{3,}? ab{4,7}?", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<test>ABC*) (?P<a>x)|(?P<b>y)')", "regex": "(?P<test>ABC*) (?P<a>x)|(?P<b>y)", "should": [], "shouldnt": []}, {"ezregex": "raw(r'[b:]+ (b)|(:+) a|(b)')", "regex": "[b:]+ (b)|(:+) a|(b)", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?')", "regex": "(?:(?P<a1>a)|(?P<b2>b))(?P<c3>c)?", "should": [], "shouldnt": []}, {"ezregex": "raw(r'(?P<name>[a-zA-Z]+)(?P=name)')", "regex": "(?P<name>[a-zA-Z]+)(?P=name)", "should": [], "shouldnt": []}, {"ezregex": "group(+letter, name='g') + earlierGroup('g')", "regex": "(?P<g>(?:[A-Za-z])+)(?P=g)", "should": ["AA", "tt"], "shouldnt": ["ABt", "t", "9d9", "tdt"]}, {"ezregex": "group(+letter) + ' ' + earlierGroup(1)", "regex": "((?:[A-Za-z])+)\\ \\1", "should": ["the the", "at at"], "shouldnt": ["att", "thethe"]}, {"ezregex": "raw(r'[AB\\]C] [--A] [ABC\\-D] [\\^ABC]')", "regex": "[AB\\]C] [--A] [ABC\\-D] [\\^ABC]", "should": [], "shouldnt": []}, {"ezregex": "stringStartsWith('a')", "regex": "\\Aa", "should": ["asdfs", "a 89sdf a", "a"], "shouldnt": [" asdf", "sdfa", "sdf"]}, {"ezregex": "lineStartsWith('a')", "regex": "(?m)^a", "should": ["asdfs", "a 89sdf a", "a", "sdfs\nasdfd"], "shouldnt": [" asdf", "sdf\nsdf", "sdf\n a", "sdfa", "sdf"]}, {"ezregex": "stringEndsWith('a')", "regex": "a\\Z", "should": ["lklkjfda", "sdf 8 a", "a"], "shouldnt": ["asdfds", "sd fd"]}, {"ezregex": "lineEndsWith('a')", "regex": "(?m)a$", "should": ["lklkjfda", "sdf 8 a", "a", "sdf\na", "sdfse\nsdafsda", "sdfa\nsdf"], "shouldnt": ["asdfds", "sd fd"]}, {"ezregex": "literal('test')", "regex": "test", "should": ["test", " sdfstestsdfs"], "shouldnt": ["te st"]}, {"ezregex": "underscore", "regex": "_", "should": ["_"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "quote", "regex": "(?:\\'|\"|`)", "should": ["\"", "'", "`"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "isExactly('test')", "regex": "\\Atest\\Z", "should": ["test"], "shouldnt": ["a test", "test ", "\ntest\n", "\ntest", "test\n"]}, {"ezregex": "matchMax('a')", "regex": "(?:a)+", "should": ["aaa", "a"], "shouldnt": ["b"]}, {"ezregex": "matchMoreThan(3, 'a')", "regex": "(?:a){4,}", "should": ["aaaa", "tesaaaaaat"], "shouldnt": ["aaa", " aa"]}, {"ezregex": "matchAtLeast(3, 'a')", "regex": "(?:a){3,}", "should": ["aaa", "aaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a')", "regex": "a?", "should": ["", "a", "aa"], "shouldnt": []}, {"ezregex": "either('a', 'b')", "regex": "(?:a|b)", "should": ["a", "b"], "shouldnt": ["c"]}, {"ezregex": "either('aa', 'ba')", "regex": "(?:aa|ba)", "should": ["aa", "ba"], "shouldnt": ["bb", "a"]}, {"ezregex": "whitespace", "regex": "\\s", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "whitechunk", "regex": "\\s+", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "white", "regex": "\\s+", "should": [" ", "\t", "\t  ", "\n"], "shouldnt": ["dfsd"]}, {"ezregex": "digit", "regex": "\\d", "should": ["6"], "shouldnt": ["_", "-", "a"]}, {"ezregex": "number", "regex": "\\d+", "should": ["6", "69"], "shouldnt": ["-a", "A"]}, {"ezregex": "punctuation", "regex": "[`\\~!@\\#\\$%\\^\\&\\*\\(\\)\\-_=\\+\\[\\{\\]\\}\\\\\\|;:'\",<\\.>/\\?\u00a2\\]]", "should": ["@", "#", "$", "%", "^", "&", "*", "(", ")"], "shouldnt": ["1", "2", "3", "4", "5", "6", "7", "8", "s", "d", "f", "s", "d", "f"]}, {"ezregex": "wordChar", "regex": "\\w", "should": ["w"], "shouldnt": ["-"]}, {"ezregex": "hex_digit", "regex": "[0-9a-fA-F]", "should": ["A", "a", "0"], "shouldnt": ["g", "G"]}, {"ezregex": "octDigit", "regex": "[0-7]", "should": ["7"], "shouldnt": ["9", "a", "A", "8"]}, {"ezregex": "chunk", "regex": ".+", "should": ["wordssdf   asdf\n"], "shouldnt": ["\n"]}, {"ezregex": "spaceOrTab", "regex": "[ \\t]", "should": [" ", "\t", " \t  "], "shouldnt": ["\n"]}, {"ezregex": "newLine", "regex": "\\n", "should": ["\n"], "shouldnt": ["\r"]}, {"ezregex": "carriageReturn", "regex": "\\r", "should": ["\r"], "shouldnt": ["\n"]}, {"ezregex": "tab", "regex": "\\t", "should": ["\t"], "shouldnt": [" "]}, {"ezregex": "space", "regex": " ", "should": [" "], "shouldnt": ["\t"]}, {"ezregex": "quote", "regex": "(?:\\'|\"|`)", "should": ["'", "\""], "shouldnt": ["wer"]}, {"ezregex": "comma", "regex": "\\,", "should": [","], "shouldnt": [".", "`"]}, {"ezregex": "period", "regex": "\\.", "should": ["."], "shouldnt": [","]}, {"ezregex": "matchRange(3, 5, 'a')", "regex": "(?:a){3,5}", "should": ["aaa", "aaaa", "aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "matchRange(3, 5, 'a', greedy=False)+'aa'", "regex": "(?:a){3,5}?aa", "should": ["aaaaa", "aaaaaa"], "shouldnt": ["aa"]}, {"ezregex": "optional('a') + 'b'", "regex": "a?b", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "optional('a', greedy=False) + 'b'", "regex": "a??b", "should": ["b", "ab", "cb"], "shouldnt": ["", "c"]}, {"ezregex": "atLeastOne('a')", "regex": "a+", "should": ["a", "aa", "aaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeastOne('a', greedy=False)", "regex": "a+?", "should": ["a", "aa", "aaaaaaaaaaaaaaaaaaaaa"], "shouldnt": ["", "b"]}, {"ezregex": "atLeast(0, 'a')", "regex": "(?:a){0,}", "should": ["", "a", "aaaaaaaaaa", "b"], "shouldnt": []}, {"ezregex": "(optional('a') + 'b') * 3", "regex": "a?ba?ba?b", "should": ["abbb", "bbb", "ababab", "bbab"], "shouldnt": ["", "aaa", "aa", "a"]}, {"ezregex": "word + whitechunk + group('func') + ':' + '()' + group(either('|', '7'), name='test')", "regex": "\\w+\\s+(func):\\(\\)(?P<test>(?:\\||7))", "should": ["wo  func:()|", "wo  func:()7"], "shouldnt": ["wo  func:[]|", "wo  func:(]7"]}, {"ezregex": "word + whitechunk + group('func') + ':' + group(anyof('8', '7'), 'test')", "regex": "\\w+\\s+(func):(?P<test>[87])", "should": ["wo  func:8", "wo  func:7"], "shouldnt": []}, {"ezregex": "7 + anyof('abc') + lineEnd", "regex": "(?m)7[abc]$", "should": ["7a", "sdfsd7b", "sdf\nsdf7b", "sdf\nsdf7b\n"], "shouldnt": ["7asdfsd", "7v"]}, {"ezregex": "7 + anyof('abc') + stringEnd", "regex": "7[abc]\\Z", "should": ["7a", "sdfsd7b"], "shouldnt": ["7asdfsd", "7v", "sdf\nsdf7bds", "sdf\nsdf7bf\n"]}, {"ezregex": "lineStart + 7 + anyof('abc')", "regex": "(?m)^7[abc]", "should": ["7a", "7bsdfsd", "\n7a", "\n7bsdfsd"], "shouldnt": ["ds7asdfsd", "7v"]}, {"ezregex": "stringStart + 7 + anyof('abc')", "regex": "\\A7[abc]", "should": ["7a", "7bsdfsd"], "shouldnt": ["ds7asdfsd", "7v", "\n7a", "\n7bsdfsd"]}, {"ezregex": "+alpha", "regex": "(?:[A-Za-z])+", "should": ["a", "asd"], "shouldnt": ["89", "._78"]}, {"ezregex": "+alphanum", "regex": "(?:[A-Za-z0-9_])+", "should": ["a", "asd", "3sd", "88"], "shouldnt": [".+"]}, {"ezregex": "raw(r'(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)')", "regex": "(<)?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|$)", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "'foo' + each(chunk + 'here' + chunk, chunk + anyOf('this', 'that') + chunk) + 'bar'", "regex": "foo(?=.+here.+).+(?:this|that).+bar", "should": ["fooum here there that bar", "foo that there here bar"], "shouldnt": []}, {"ezregex": "opt(group('<')) + group(word + '@' + word + +('.' + word)) + ifExists(1, '>', string_end)", "regex": "(?:(<))?(\\w+@\\w+(?:\\.\\w+)+)(?(1)>|\\Z)", "should": ["<user@host.com>", "user@host.com"], "shouldnt": ["user@host.com>"]}, {"ezregex": "match_range(1, 5, word + ' ')", "regex": "(?:\\w+\\ ){1,5}", "should": [], "shouldnt": []}, {"ezregex": "(match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ') + (match_range(3, 5, word_char) + ' ')", "regex": "(?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ (?:\\w){3,5}\\ ", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + match_max(group('me')) + amt(2, 'mhmm')", "regex": "(?P<i>pattern)(?:\\d)?(?:(me))+(?:mhmm){2}", "should": [], "shouldnt": []}, {"ezregex": "string_starts_with", "regex": "\\A", "should": [], "shouldnt": []}, {"ezregex": "string_ends_with", "regex": "\\Z", "should": [], "shouldnt": []}, {"ezregex": "line_starts_with", "regex": "(?m)^", "should": [], "shouldnt": []}, {"ezregex": "line_ends_with", "regex": "(?m)$", "should": [], "shouldnt": []}, {"ezregex": "word_boundary", "regex": "\\b", "should": [], "shouldnt": []}, {"ezregex": "not_word_boundary", "regex": "\\B", "should": [], "shouldnt": []}, {"ezregex": "tab", "regex": "\\t", "should": [], "shouldnt": []}, {"ezregex": "space", "regex": " ", "should": [], "shouldnt": []}, {"ezregex": "space_or_tab", "regex": "[ \\t]", "should": [], "shouldnt": []}, {"ezregex": "new_line", "regex": "\\n", "should": [], "shouldnt": []}, {"ezregex": "carriage_return", "regex": "\\r", "should": [], "shouldnt": []}, {"ezregex": "quote", "regex": "(?:\\'|\"|`)", "should": [], "shouldnt": []}, {"ezregex": "vertical_tab", "regex": "\\v", "should": [], "shouldnt": []}, {"ezregex": "form_feed", "regex": "\\f", "should": [], "shouldnt": []}, {"ezregex": "comma", "regex": "\\,", "should": [], "shouldnt": []}, {"ezregex": "period", "regex": "\\.", "should": [], "shouldnt": []}, {"ezregex": "underscore", "regex": "_", "should": [], "shouldnt": []}, {"ezregex": "any_between('a', 'b')", "regex": "[a-b]", "should": [], "shouldnt": []}, {"ezregex": "not_whitespace", "regex": "\\S", "should": [], "shouldnt": []}, {"ezregex": "not_digit", "regex": "\\D", "should": [], "shouldnt": []}, {"ezregex": "not_word", "regex": "\\W", "should": [], "shouldnt": []}, {"ezregex": "whitespace", "regex": "\\s", "should": [], "shouldnt": []}, {"ezregex": "whitechunk", "regex": "\\s+", "should": [], "shouldnt": []}, {"ezregex": "digit", "regex": "\\d", "should": [], "shouldnt": []}, {"ezregex": "number", "regex": "\\d+", "should": [], "shouldnt": []}, {"ezregex": "word", "regex": "\\w+", "should": [], "shouldnt": []}, {"ezregex": "word_char", "regex": "\\w", "should": [], "shouldnt": []}, {"ezregex": "anything", "regex": ".", "should": [], "shouldnt": []}, {"ezregex": "chunk", "regex": ".+", "should": [], "shouldnt": []}, {"ezregex": "uppercase", "regex": "[A-Z]", "should": [], "shouldnt": []}, {"ezregex": "lowercase", "regex": "[a-z]", "should": [], "shouldnt": []}, {"ezregex": "letter", "regex": "[A-Za-z]", "should": [], "shouldnt": []}, {"ezregex": "hex_digit", "regex": "[0-9a-fA-F]", "should": [], "shouldnt": []}, {"ezregex": "oct_digit", "regex": "[0-7]", "should": [], "shouldnt": []}, {"ezregex": "punctuation", "regex": "[`\\~!@\\#\\$%\\^\\&\\*\\(\\)\\-_=\\+\\[\\{\\]\\}\\\\\\|;:'\",<\\.>/\\?\u00a2\\]]", "should": [], "shouldnt": []}, {"ezregex": "controller", "regex": "[\\x00-\\x1F\\x7F]", "should": [], "shouldnt": []}, {"ezregex": "printable", "regex": "[\\x21-\\x7E]", "should": [], "shouldnt": []}, {"ezregex": "printable_and_space", "regex": "[\\x20-\\x7E]", "should": [], "shouldnt": []}, {"ezregex": "alpha_num", "regex": "[A-Za-z0-9_]", "should": [], "shouldnt": []}, {"ezregex": "match_max(digit)", "regex": "(?:\\d)+", "should": [], "shouldnt": []}, {"ezregex": "match_num(2, digit)", "regex": "(?:\\d){2}", "should": [], "shouldnt": []}, {"ezregex": "match_more_than(2, digit)", "regex": "(?:\\d){3,}", "should": [], "shouldnt": []}, {"ezregex": "match_at_least(2, digit)", "regex": "(?:\\d){2,}", "should": [], "shouldnt": []}, {"ezregex": "match_at_most(2, digit)", "regex": "(?:\\d){0,2}", "should": [], "shouldnt": []}, {"ezregex": "match_range(2, 4, digit)", "regex": "(?:\\d){2,4}", "should": [], "shouldnt": []}, {"ezregex": "at_least_one(digit)", "regex": "(?:\\d)+", "should": [], "shouldnt": []}, {"ezregex": "at_least_none(digit)", "regex": "(?:\\d)*", "should": [], "shouldnt": []}, {"ezregex": "optional(digit)", "regex": "(?:\\d)?", "should": [], "shouldnt": []}, {"ezregex": "either(digit, word)", "regex": "(?:\\d|\\w+)", "should": [], "shouldnt": []}, {"ezregex": "any_of(digit, word, 'a', 'b')", "regex": "(?:\\d|\\w+|a|b)", "should": [], "shouldnt": []}, {"ezregex": "any_char_except('abcd')", "regex": "[^abcd]", "should": [], "shouldnt": []}, {"ezregex": "if_proceded_by(digit)", "regex": "(?=\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_not_proceded_by(digit)", "regex": "(?!\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_preceded_by(digit)", "regex": "(?<=\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_not_preceded_by(digit)", "regex": "(?<!\\d)", "should": [], "shouldnt": []}, {"ezregex": "if_enclosed_with('|', digit)", "regex": "((?<=\\|)\\d(?=\\|))", "should": [], "shouldnt": []}, {"ezregex": "group(digit)", "regex": "(\\d)", "should": [], "shouldnt": []}, {"ezregex": "passive_group(digit)", "regex": "(?:\\d)", "should": [], "shouldnt": []}, {"ezregex": "literally_anything", "regex": "(?:.|\\n)", "should": [], "shouldnt": []}, {"ezregex": "signed", "regex": "(?:(?:\\-|\\+))?\\d+", "should": [], "shouldnt": []}, {"ezregex": "unsigned", "regex": "\\d+", "should": [], "shouldnt": []}, {"ezregex": "plain_float", "regex": "(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?", "should": [], "shouldnt": []}, {"ezregex": "full_float", "regex": "(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?(?:e(?:(?:\\-|\\+))?\\d+)?", "should": [], "shouldnt": []}, {"ezregex": "int_or_float", "regex": "(?:(?:\\-|\\+))?\\d+\\.(?:\\d+)?(?:e(?:(?:\\-|\\+))?\\d+)?(?:\\-)?\\d+(?:\\.(?:\\d+)?)?", "should": [], "shouldnt": []}, {"ezregex": "ow", "regex": "(?:\\s+)?", "should": [], "shouldnt": []}, {"ezregex": "is_exactly(digit)", "regex": "\\A\\d\\Z", "should": [], "shouldnt": []}, {"ezregex": "literal('this')", "regex": "this", "should": [], "shouldnt": []}, {"ezregex": "digit + ASCII", "regex": "(?a)\\d", "should": [], "shouldnt": []}, {"ezregex": "digit + DOTALL", "regex": "(?s)\\d", "should": [], "shouldnt": []}, {"ezregex": "digit + IGNORECASE", "regex": "(?i)\\d", "should": [], "shouldnt": []}, {"ezregex": "group('pattern', name='i') + optional(digit) + 'test'", "regex": "(?P<i>pattern)(?:\\d)?test", "should": [], "shouldnt": []}, {"ezregex": "digit + MULTILINE", "regex": "(?m)\\d", "should": [], "shouldnt": []}, {"ezregex": "'------------------LAST REGEX---------------------'", "regex": "------------------LAST REGEX---------------------", "should": ["------------------LAST REGEX---------------------"], "shouldnt": ["asdk"]}]}